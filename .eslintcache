[{"C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\index.js":"1","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\serviceWorkerRegistration.js":"2","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\reportWebVitals.js":"3","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\components\\WeatherIcon.js":"4","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\utils\\helpers.js":"5","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\App.js":"6","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\views\\WeatherCard.js":"7","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\hooks\\useWeatherAPI.js":"8","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\views\\WeatherSetting.js":"9","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\components\\TemperaturePrediction.js":"10","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\components\\WeeklyTemperaturePrediction.js":"11","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\components\\WeeklyWeatherIcons.js":"12"},{"size":944,"mtime":1613649960406,"results":"13","hashOfConfig":"14"},{"size":5064,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":364,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":2782,"mtime":1613800045170,"results":"17","hashOfConfig":"14"},{"size":3832,"mtime":1611897840298,"results":"18","hashOfConfig":"14"},{"size":3091,"mtime":1613737157604,"results":"19","hashOfConfig":"14"},{"size":5156,"mtime":1613804385489,"results":"20","hashOfConfig":"14"},{"size":4420,"mtime":1613718590746,"results":"21","hashOfConfig":"14"},{"size":3293,"mtime":1611977201095,"results":"22","hashOfConfig":"14"},{"size":2029,"mtime":1613717517478,"results":"23","hashOfConfig":"14"},{"size":2361,"mtime":1613804515959,"results":"24","hashOfConfig":"14"},{"size":2794,"mtime":1613715635518,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"dbh6cv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\index.js",[],["54","55"],"C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\reportWebVitals.js",[],"C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\components\\WeatherIcon.js",[],"C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\utils\\helpers.js",[],"C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\App.js",["56"],"import React, { useState, useEffect, useCallback, useMemo } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { ThemeProvider } from '@emotion/react'\r\nimport { getMoment, findLocation } from './utils/helpers'\r\nimport WeatherCard from './views/WeatherCard'\r\nimport useWeatherAPI from './hooks/useWeatherAPI'\r\nimport WeatherSetting from './views/WeatherSetting'\r\n\r\n\r\nconst AUTHORIZATION_KEY = 'CWB-6B0FF102-FDE8-40C3-B2CA-CECA1E4E67E5'\r\nconst BASE_URL = 'opendata.cwb.gov.tw/api'\r\nconst CURRENT_WEATHER_URL ='v1/rest/datastore/O-A0003-001?'\r\nconst FORECAST_WEATHER_URL = 'v1/rest/datastore/F-C0032-001?'\r\n\r\n\r\n\r\nconst theme = {\r\n  light: {\r\n    backgroundColor: '#ededed',\r\n    foregroundColor: '#f9f9f9',\r\n    boxShadow: '0 1px 3px 0 #999999',\r\n    titleColor: '#212121',\r\n    temperatureColor: '#757575',\r\n    textColor: '#828282',\r\n\r\n  },\r\n  dark: {\r\n    backgroundColor: '#1F2022',\r\n    foregroundColor: '#121416',\r\n    boxShadow:\r\n      '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\r\n    titleColor: '#f9f9fa',\r\n    temperatureColor: '#dddddd',\r\n    textColor: '#cccccc',\r\n    background: 'linear-gradient(20deg,#19283D 0%, #1D678F 95%)'\r\n  },\r\n};\r\n\r\nconst Container = styled.div`\r\n  background-color:${({ theme }) => theme.backgroundColor};\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\n\r\n\r\nfunction App() {\r\n  const storageCity = localStorage.getItem('cityName') || '臺北市'\r\n  const [currentTheme, setCurrentTheme] = useState('dark')\r\n  const [currentPage, setCurrentPage] = useState('WeatherCard')\r\n  const [currentCity, setCurrentCity] = useState(storageCity)\r\n\r\n  const handleCurrentPageChange = (currentPage) => {\r\n    setCurrentPage(currentPage)\r\n  }\r\n  const handleCurrentCityChange = (currentCity) => {\r\n    setCurrentCity(currentCity)\r\n  }\r\n\r\n  const currentLocation = useMemo(() => findLocation(currentCity), [currentCity])\r\n  const { cityName, locationName, sunriseCityName } = currentLocation\r\n  const moment = useMemo(() => getMoment(sunriseCityName), [sunriseCityName])\r\n\r\n  useEffect(() => {\r\n    setCurrentTheme(moment === 'day' ? 'light' : 'dark')\r\n  }, [moment])\r\n\r\n  const [weatherElement, fetchData] = useWeatherAPI({\r\n    locationName,\r\n    cityName,\r\n    authorizationKey: AUTHORIZATION_KEY,\r\n    forecastWeatherUrl: FORECAST_WEATHER_URL,\r\n    currentWeatherUrl: CURRENT_WEATHER_URL,\r\n    baseUrl: BASE_URL\r\n  })\r\n\r\n  return (\r\n    <ThemeProvider theme={theme[currentTheme]}>\r\n      <Container>\r\n        {currentPage === 'WeatherCard' && (\r\n          <WeatherCard\r\n            weatherElement={weatherElement}\r\n            moment={moment}\r\n            fetchData={fetchData}\r\n            cityName={cityName}\r\n            handleCurrentPageChange={handleCurrentPageChange} />\r\n\r\n        )}\r\n        {currentPage === 'WeatherSetting' && <WeatherSetting\r\n          cityName={cityName}\r\n          handleCurrentCityChange={handleCurrentCityChange}\r\n          handleCurrentPageChange={handleCurrentPageChange} />}\r\n\r\n\r\n\r\n      </Container>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\views\\WeatherCard.js",["57","58","59","60"],"C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\hooks\\useWeatherAPI.js",["61","62","63"],"import React, { useState, useEffect, useCallback } from 'react'\r\n\r\nconst fetchCurrentWeather = ({ authorizationKey, locationName }) => {\r\n\treturn fetch(\r\n\t\t`https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${authorizationKey}&locationName=${locationName}`\r\n\t)\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => {\r\n\t\t\tconst locationData = data.records.location[0]\r\n\t\t\tconst weatherElements = locationData.weatherElement.reduce(\r\n\t\t\t\t(neededElements, item) => {\r\n\t\t\t\t\tif (['WDSD', 'TEMP'].includes(item.elementName)) {\r\n\t\t\t\t\t\tneededElements[item.elementName] = item.elementValue\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn neededElements\r\n\t\t\t\t},\r\n\t\t\t\t{}\r\n\t\t\t);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tobservationTime: locationData.time.obsTime,\r\n\t\t\t\tlocationName: locationData.locationName,\r\n\t\t\t\ttemperature: weatherElements.TEMP,\r\n\t\t\t\twindSpeed: weatherElements.WDSD,\r\n\t\t\t}\r\n\t\t})\r\n}\r\n\r\nconst fetchWeatherForecast = ({ authorizationKey, cityName }) => {\r\n\treturn fetch(\r\n\t\t`https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${authorizationKey}&locationName=${cityName}`\r\n\t)\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => {\r\n\t\t\tconst locationData = data.records.location[0]\r\n\t\t\tconst weatherElements = locationData.weatherElement.reduce(\r\n\t\t\t\t(neededElements, item) => {\r\n\t\t\t\t\tif (['Wx', 'PoP', 'CI'].includes(item.elementName)) {\r\n\t\t\t\t\t\tneededElements[item.elementName] = item.time[0].parameter;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn neededElements\r\n\t\t\t\t},\r\n\t\t\t\t{}\r\n\t\t\t)\r\n\t\t\tconst predicationData = locationData.weatherElement.reduce(\r\n\t\t\t\t(neededElements, item) => {\r\n\t\t\t\t\tif (['MaxT'].includes(item.elementName)) {\r\n\t\t\t\t\t\tneededElements[item.elementName] = item.time\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn neededElements\r\n\t\t\t\t},\r\n\t\t\t\t{}\r\n\t\t\t)\r\n\t\t\tconst predicationTemps = predicationData.MaxT.flatMap(item => item.parameter.parameterName)\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdescription: weatherElements.Wx.parameterName,\r\n\t\t\t\tweatherCode: weatherElements.Wx.parameterValue,\r\n\t\t\t\trainPossibility: weatherElements.PoP.parameterName,\r\n\t\t\t\tcomfortability: weatherElements.CI.parameterName,\r\n\t\t\t\tpredicationTemps: predicationTemps\r\n\t\t\t}\r\n\t\t})\r\n}\r\n\r\nconst fetchWeeklyWeather = ({ authorizationKey, cityName }) => {\r\n\treturn fetch(\r\n\t\t`https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-D0047-003?Authorization=${authorizationKey}`\r\n\t)\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => {\r\n\t\t\tlet cityName = '宜蘭市'\r\n\t\t\tconst locationData = data.records.locations[0].location.filter(city => city.locationName == cityName)\r\n\t\t\tconst weeklyWeather = locationData[0].weatherElement.reduce(\r\n\t\t\t\t(neededElements, item) => {\r\n\t\t\t\t\tif (['Wx', 'PoP12h', 'T'].includes(item.elementName)) {\r\n\t\t\t\t\t\tneededElements[item.elementName] = item.time;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn neededElements\r\n\t\t\t\t},\r\n\t\t\t\t{}\r\n\t\t\t)\r\n\t\t\tconsole.log('weeklyWeather', weeklyWeather)\r\n\t\t\tconst WeatherCodes = weeklyWeather.Wx.flatMap(item => item.elementValue[1].value)\r\n\t\t\tconst weeklyPoP12h = weeklyWeather.PoP12h.flatMap(item => item.elementValue[0].value)\r\n\t\t\tconst weeklyT = weeklyWeather.T.flatMap(item => item.elementValue[0].value)\r\n\r\n\r\n\r\n\t\t\treturn {\r\n\t\t\t\tweatherCodes: WeatherCodes,\r\n\t\t\t\tweeklyPoP12h: weeklyPoP12h,\r\n\t\t\t\tweeklyT: weeklyT,\r\n\t\t\t}\r\n\t\t})\r\n}\r\n\r\nconst useWeatherAPI = ({ baseUrl, currentWeatherUrl, forecastWeatherUrl, locationName, cityName, authorizationKey }) => {\r\n\tconst [weatherElement, setWeatherElement] = useState({\r\n\t\tobservationTime: new Date(),\r\n\t\tlocationName: '',\r\n\t\ttemperature: 0,\r\n\t\twindSpeed: 0,\r\n\t\tdescription: '',\r\n\t\t// weatherCode: 0,\r\n\t\trainPossibility: 0,\r\n\t\tcomfortability: '',\r\n\t\tisLoading: true,\r\n\t\tpredicationTemps: [],\r\n\t\tweatherCodes: [],\r\n\t\tweeklyPoP12h: [],\r\n\t\tweeklyT:[]\r\n\t})\r\n\tconst fetchData = useCallback(async () => {\r\n\t\tsetWeatherElement((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tisLoading: true,\r\n\t\t}))\r\n\t\tconst [currentWeather, weatherForecast, weeklyWeather ] = await Promise.all([\r\n\t\t\tfetchCurrentWeather({ baseUrl, currentWeatherUrl, authorizationKey, locationName}),\r\n\t\t\tfetchWeatherForecast({ baseUrl, forecastWeatherUrl, authorizationKey, cityName }),\r\n\t\t\tfetchWeeklyWeather({  authorizationKey, cityName }),\r\n\t\t])\r\n\r\n\t\tsetWeatherElement({\r\n\t\t\t...currentWeather,\r\n\t\t\t...weatherForecast,\r\n\t\t\t...weeklyWeather,\r\n\t\t\tisLoading: false,\r\n\t\t})\r\n\t}, [authorizationKey, locationName, cityName])\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchData()\r\n\t}, [fetchData])\r\n\treturn [weatherElement, fetchData]\r\n}\r\n\r\nexport default useWeatherAPI\r\n","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\views\\WeatherSetting.js",[],"C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\components\\TemperaturePrediction.js",["64"],"import React, { useRef, useState, useEffect } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { ThemeProvider } from '@emotion/react'\r\n\r\n\r\nconst theme = {\r\n\tlight: {\r\n\t\tbackgroundColor: '#ededed',\r\n\t\tforegroundColor: '#f9f9f9',\r\n\t\tboxShadow: '0 1px 3px 0 #999999',\r\n\t\ttitleColor: '#212121',\r\n\t\ttemperatureColor: '#757575',\r\n\t\ttextColor: '#828282',\r\n\r\n\t},\r\n\tdark: {\r\n\t\tbackgroundColor: '#1F2022',\r\n\t\tforegroundColor: '#121416',\r\n\t\tboxShadow:\r\n\t\t\t'0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\r\n\t\ttitleColor: '#f9f9fa',\r\n\t\ttemperatureColor: '#dddddd',\r\n\t\ttextColor: '#cccccc',\r\n\t},\r\n};\r\n\r\n\r\nconst TemperaturePredictionWrapper = styled.div`\r\n  position: relative;\r\n\twidth: 100%;\r\n  background-color: transparent;\r\n\tbox-sizing: border-box;\r\n  transition-duration: 0.5s\r\n`\r\n\r\n\r\nconst TemperaturePrediction = ({ predicationTemps, moment }) => {\r\n\r\n\tconst [currentTheme, setCurrentTheme] = useState('dark')\r\n\r\n \tuseEffect(() => {\r\n \tsetCurrentTheme(moment === 'day' ? 'light' : 'dark')\r\n\t\t}, [moment])\r\n\r\n\tlet by = \"60\"\r\n\tlet dy1 = `${(parseInt(by)+10*(predicationTemps[0] - predicationTemps[1]))}`\r\n\tlet dy2 = `${(parseInt(by)+10*(predicationTemps[0] - predicationTemps[2]))}`\r\n\tlet bx = \"60\"\r\n\tlet dx1 = `${2 * parseInt(bx)}`\r\n\tlet dx2 = `${3 * parseInt(bx)}`\r\n\tlet points =`${bx},${by} ${dx1},${dy1} ${dx2},${dy2}`\r\n\r\n\r\n\treturn (\r\n\t\t<ThemeProvider theme={theme[currentTheme]}>\r\n\t\t\t<TemperaturePredictionWrapper>\r\n\t\t\t\t<svg className=\"temsvg\" fill={theme[currentTheme].titleColor}>\r\n\t\t\t\t\t<text x={bx} y={by}> {predicationTemps[0]}°C</text>\r\n\t\t\t\t\t<circle cx={bx} cy={by} r=\"3\"></circle>\r\n\t\t\t\t\t<text x={dx1} y={dy1}>{predicationTemps[1]}°C</text>\r\n\t\t\t\t\t<circle cx={dx1} cy={dy1} r=\"3\"></circle>\r\n\t\t\t\t\t<text x={dx2} y={dy2}>{predicationTemps[2]}°C</text>\r\n\t\t\t\t\t<circle cx={dx2} cy={dy2} r=\"3\"></circle>\r\n\t\t\t\t\t<polyline points={points} stroke={theme[currentTheme].titleColor}></polyline>\r\n\t\t\t\t</svg>\r\n\t\t\t</TemperaturePredictionWrapper>\r\n\t\t</ThemeProvider>\r\n\t)\r\n}\r\n\r\nexport default TemperaturePrediction\r\n","C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\components\\WeeklyTemperaturePrediction.js",["65","66","67","68","69","70"],"C:\\Users\\wwwji\\OneDrive\\文件\\React\\react-weather-card-pwa\\src\\components\\WeeklyWeatherIcons.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":1,"column":38,"nodeType":"77","messageId":"78","endLine":1,"endColumn":49},{"ruleId":"75","severity":1,"message":"79","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":25},{"ruleId":"75","severity":1,"message":"80","line":1,"column":27,"nodeType":"77","messageId":"78","endLine":1,"endColumn":36},{"ruleId":"75","severity":1,"message":"76","line":1,"column":38,"nodeType":"77","messageId":"78","endLine":1,"endColumn":49},{"ruleId":"75","severity":1,"message":"81","line":152,"column":5,"nodeType":"77","messageId":"78","endLine":152,"endColumn":16},{"ruleId":"75","severity":1,"message":"82","line":1,"column":8,"nodeType":"77","messageId":"78","endLine":1,"endColumn":13},{"ruleId":"83","severity":1,"message":"84","line":73,"column":93,"nodeType":"85","messageId":"86","endLine":73,"endColumn":95},{"ruleId":"87","severity":1,"message":"88","line":131,"column":5,"nodeType":"89","endLine":131,"endColumn":47,"suggestions":"90"},{"ruleId":"75","severity":1,"message":"91","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":23},{"ruleId":"75","severity":1,"message":"91","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":23},{"ruleId":"75","severity":1,"message":"79","line":1,"column":25,"nodeType":"77","messageId":"78","endLine":1,"endColumn":33},{"ruleId":"75","severity":1,"message":"80","line":1,"column":35,"nodeType":"77","messageId":"78","endLine":1,"endColumn":44},{"ruleId":"83","severity":1,"message":"84","line":86,"column":64,"nodeType":"85","messageId":"86","endLine":86,"endColumn":66},{"ruleId":"83","severity":1,"message":"84","line":87,"column":64,"nodeType":"85","messageId":"86","endLine":87,"endColumn":66},{"ruleId":"83","severity":1,"message":"84","line":88,"column":54,"nodeType":"85","messageId":"86","endLine":88,"endColumn":56},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'weatherCode' is assigned a value but never used.","'React' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'baseUrl', 'currentWeatherUrl', and 'forecastWeatherUrl'. Either include them or remove the dependency array.","ArrayExpression",["94"],"'useRef' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},"Update the dependencies array to be: [baseUrl, currentWeatherUrl, authorizationKey, locationName, forecastWeatherUrl, cityName]",{"range":"97","text":"98"},[4242,4284],"[baseUrl, currentWeatherUrl, authorizationKey, locationName, forecastWeatherUrl, cityName]"]